@model FormSubmissionDemo.Models.SaveModel
@{
    var action = ViewData["Action"];
    var favoriteColorSelectListItems = ViewBag._FavoriteColorSelectListItems as List<SelectListItem>;
    var addressCountrySelectListItems = ViewBag._AddressCountrySelectListItems as List<SelectListItem>;
    var addressStateProvinceSelectListItems = ViewBag._AddressStateProvinceSelectListItems as List<SelectListItem>;
    var profiles = ViewBag._ProfileItems as List<ProfileItem>;
    var display = Model.FormMode == FormMode.Edit ? string.Empty : "d-none";
    var whitelistTags = ViewBag._WhiteListTags as List<SelectListItem>;
}
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify"></script>
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.polyfills.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.css" rel="stylesheet" type="text/css" />
<script src="/lib/tinymce/tinymce.min.js"></script>
<script>
    tinymce.init({
        selector: 'textarea#@Html.IdFor(m => m.Skills)'
    });
</script>
<form method="post" enctype="multipart/form-data" form-mode="@Model.FormMode">
    <h2>@action (@Model.FormMode)</h2>
    <div asp-validation-summary="None" class="text-danger"></div>
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div asp-validation-summary="All" class="text-danger"></div>
    <section>
        @if (Model.FormMode == FormMode.Finish)
        {
            <p>Thank you</p>
            <a class="btn btn-primary" href="/">Back to home</a>
        }
    </section>
    <section>
        @if (Model.FormMode == FormMode.Edit || Model.FormMode == FormMode.Confirm)
        {
            <div class="form-group">
                <label asp-for="Username"></label>
                <input type="text" asp-for="Username" class="form-control">
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="mt-2">
                <label asp-for="ProfilePicture"></label>
                <image-upload for="ProfilePicture"></image-upload>
            </div>
            <div class="mt-2">
                <label asp-for="Address"></label>
                <div class="mt-1">
                    <label asp-for="Address.CountryId"></label>
                    <select asp-for="Address.CountryId" asp-items="addressCountrySelectListItems"
                        class="form-select"></select>
                    <span asp-validation-for="Address.CountryId" class="text-danger"></span>
                </div>
                <div class="mt-1">
                    <label asp-for="Address.StateProvinceId"></label>
                    <select asp-for="Address.StateProvinceId" asp-items="addressStateProvinceSelectListItems"
                        class="form-select"></select>
                    <span asp-validation-for="Address.StateProvinceId" class="text-danger"></span>
                </div>
                <div class="mt-1">
                    <label asp-for="Address.City"></label>
                    <input type="text" asp-for="Address.City" class="form-control">
                    <span asp-validation-for="Address.City" class="text-danger"></span>
                </div>
            </div>
            <div class="mt-2">
                <div>Favorite Colors</div>
                @for (var i = 0; i < favoriteColorSelectListItems.Count; i++)
                {
                    <div>
                        <input type="checkbox" asp-for="FavoriteColorItems[i].Checked">
                        <input type="hidden" asp-for="FavoriteColorItems[i].Color"
                            value="@favoriteColorSelectListItems[i].Value">
                        <label>@favoriteColorSelectListItems[i].Text</label>
                    </div>
                }
                <span asp-validation-for="FavoriteColorItems" class="text-danger"></span>
            </div>
            <div class="mt-2">
                <div>Tags</div>
                <input type="text" asp-for="TagsJson" value="@Json.Serialize(Model.Tags?.Select(t => new { Value = t.Name, Id = t.Id}))" tagify="true" />
                <span asp-validation-for="TagsJson"></span>
            </div>
            <div class="mt-2 js-form-profiles">
                <div>Profiles</div>
                <div class="d-flex mt-1 js-profiles">
                    @for (int i = 0; i < Model.ProfileIds.Count; i++)
                    {
                        <div class="border p-2 me-1 js-profile">
                            <span>@profiles.First(p => p.Id == Model.ProfileIds[i]).Name</span>
                            <i role="button" class="bi bi-x remove @display"></i>
                            <input type="hidden" asp-for="ProfileIds[i]">
                        </div>
                    }
                </div>
                <button type="button" class="btn btn-secondary mt-2 js-select @display">Choose from dialog</button>
            </div>
            <div class="mt-2">
                <label class="form-label" asp-for="Skills"></label>
                <div>
                    <textarea asp-for="Skills" class="form-control" tinymce-editor></textarea>
                    <span asp-validation-for="Skills" class="text-danger"></span>
                </div>
            </div>
        }
    </section>
    <hr>
    <section>
        @if (Model.FormMode == FormMode.Confirm)
        {
            <input type="submit" name="@BaseModel.ConfirmBackFormName" value="Edit" class="btn btn-primary" />
        }
        @if (Model.FormMode == FormMode.Edit || Model.FormMode == FormMode.Confirm)
        {
            <button type="submit" class="btn btn-primary">@(Model.FormMode == FormMode.Edit ? "Confirm" : "Save")</button>
        }
    </section>
</form>
<script>
    initTagsTagify();
    function initTagsTagify() {
        const input = document.getElementById('@Html.IdFor(m => m.TagsJson)');
        const tagify = new Tagify(input, {
            whitelist: JSON.parse('@Json.Serialize(whitelistTags.Select(t => new { Value = t.Text, Id = int.Parse(t.Value)}))'),
            maxTags: 5,
            dropdown: {
                maxItems: 20,
                enabled: 0
            }
        });
    }
</script>
<div class="modal" id="profileSelectModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Select profile(s)</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body"></div>
            <div class="d-flex flex-nowrap p-2 js-profiles"></div>
            <div class="modal-footer mt-2">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary js-save-button">Save changes</button>
            </div>
        </div>
    </div>
</div>
<script>
    $(function () {
        $('#@Html.IdFor(m => m.Address.CountryId)').on('change', function () {
            const countryId = $(this).val();
            const url = new URL('@Url.Action("AjaxCountryStateProvinceOptionsPartial")', location.origin);
            url.searchParams.set('countryId', countryId);
            $('#@Html.IdFor(m => m.Address.StateProvinceId)').load(url.href);
        });
    });
</script>
<template id="tplProfileChip">
    <div class="border p-2 me-1 js-profile">
        <span></span>
        <i role="button" class="bi bi-x remove"></i>
        <input type="hidden">
    </div>
</template>
<script>
    $(function () {
        const maxProfileCount = 5;
        let selectedProfiles = JSON.parse('@Json.Serialize(profiles.Select(p => new { p.Id, p.Name}))');
        let modalSelectedProfiles = [];
        $('.js-form-profiles .js-select').on('click', function () {
            loadModal();
            modalSelectedProfiles = JSON.parse(JSON.stringify(selectedProfiles));
            $('#profileSelectModal').modal('show');
        });
        $('body').on('click', '.js-form-profiles .js-profiles .remove', function () {
            const id = $(this).siblings('input').val();
            const index = selectedProfiles.findIndex(x => x.id == id);
            if (index > -1) {
                selectedProfiles.splice(index, 1);
                $(this).parent('.js-profile').remove();
                bind();
            }
        })
        function bind() {
            const html = selectedProfiles.map((p, index) => {
                const profile = $($("#tplProfileChip").html());
                profile.find('span').html(p.name);
                profile.find('input').attr('name', `@(Html.NameFor(m => m.ProfileIds))[${index}]`).attr('value', p.id);
                return profile[0].outerHTML;
            }).join('');
            $('.js-form-profiles .js-profiles').html(html)
        }

        $('body').on('click', '#profileSelectModal .page-item a', function (e) {
            e.preventDefault();
            const url = $(this).attr('href');
            loadModal(url);
        });

        $('body').on('click', '#profileSelectModal .js-save-button', function () {
            $('#profileSelectModal').modal('hide');
            selectedProfiles = JSON.parse(JSON.stringify(modalSelectedProfiles));
            bind();
        });

        $('body').on('change', '#profileSelectModal input[type="checkbox"]', function (e) {
            const checked = $(this).prop('checked');
            const value = $(this).val();
            const text = $(this).closest('tr').find('td.js-text').text();
            const index = modalSelectedProfiles.findIndex(x => x.id == value);
            if (checked && index === -1) {
                if (modalSelectedProfiles.length < maxProfileCount) {
                    modalSelectedProfiles.push({ id: value, name: text });
                }
                else {
                    alert('You can select only 5 profiles')
                }
            }
            else if (!checked && index !== -1) {
                modalSelectedProfiles.splice(index, 1);
            }
            bindModal();
        })

        $('body').on('click', '#profileSelectModal .js-profiles .remove', function () {
            const id = $(this).siblings('input').val();
            const index = modalSelectedProfiles.findIndex(x => x.id == id);
            if (index > -1) {
                modalSelectedProfiles.splice(index, 1);
                $(this).parent('.js-profile').remove();
                bindModal();
            }
        })
        function loadModal(url) {
            url = url || '@Url.Action(nameof(HomeController.AjaxProfileList))';
            $('#profileSelectModal .modal-body').load(url, bindModal);
        }
        function bindModal() {
            const checkboxes = $('#profileSelectModal .modal-body table tbody tr input[type="checkbox"]');
            checkboxes.each((_, checkbox) => {
                const id = $(checkbox).val();
                const index = modalSelectedProfiles.findIndex(p => p.id == id);
                $(checkbox).prop('checked', index !== -1);
            });

            const html = modalSelectedProfiles.map((p, index) => {
                const profile = $($("#tplProfileChip").html());
                profile.find('span').html(p.name);
                profile.find('input').attr('value', p.id);
                return profile[0].outerHTML;
            }).join('');
            $('#profileSelectModal .js-profiles').html(html);
        }
    })
</script>